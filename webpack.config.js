const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin')



let mode = "development"
// Hack required because HMR doesn't watch css (webpack-5) because of browerslist
let target = "web"


if(process.env.NODE_ENV === "production") {
    mode = "production"
}

module.exports = {
    mode,
    target,
    entry: "./src/index.js",
    module: {
        rules: [
            {
                test: /\.jsx?$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader'
                }
            }, {
                test: /\.s?css$/i,
                use: [MiniCssExtractPlugin.loader, "css-loader", "sass-loader"]
                /*
                * right - left
                * css-loader -> collect all the css files referenced in your application and put it into a string
                * style-loader/MiniCssExtractPlugin -> would take a output string generated by css-loader and put it inside <style> tag
                * diff btw style-loader & MiniCssExtractPlugin
                *   style-loader will inject styles in a js bundle,
                *   MiniCssExtractPlugin will create a separate css file
                * postcss -> add vendor prefixes to css rules
                * */
            }
        ],
    },

    plugins: [new MiniCssExtractPlugin(), new HtmlWebpackPlugin({
        template: "./src/index.html",
        title: "JS Boiler Plate",
        filename: 'index.html',
        inject: 'body'
    })],

    resolve: {
        extensions: ['.js']
    },

    output: {
        path: __dirname + '/dist',
        filename: 'index_bundle.js'
    },


    devtool: "source-map", //enable source-map dev-tools
    devServer: {
        historyApiFallback: true,
        contentBase: "./dist", // to render index.html directly instead of folder structure
        hot: true, // enable hot-reloading instead of live reloading
    }
}
